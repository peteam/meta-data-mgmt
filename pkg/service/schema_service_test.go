package service

import (
	"io/ioutil"
	"path/filepath"
	"testing"

	"cicd-github.quickplay.com/platform-engineering/metadata-mgmt-services/pkg/repository"
)

/*
 * Auto generated by Quickstart.
 * Developer to replace the generated test cases with real ones.
 */
func TestValidator_correct_json_from_text(t *testing.T) {
	schemaRepo := repository.NewSchemaRepository()
	schemaService := NewSchemaService(schemaRepo)

	schemaService.Validate(`{"type": "string"}`, "ddd")
}

func TestValidator_correct_movie_json_from_file(t *testing.T) {
	movieSampleDataPath := filepath.Join("testdata", "samples/movie_sample_data.json") // relative path
	bytes, err := ioutil.ReadFile(movieSampleDataPath)
	if err != nil {
		t.Fatal(err)
	}

	testDataPath := filepath.Join("testdata", "schemas") // relative path
	absTestDataPath, err := filepath.Abs(testDataPath)

	if err != nil {
		t.Fatal(err)
	}
	schemaRepo := repository.NewSchemaRepository()
	schemaService := NewSchemaService(schemaRepo)

	schemaMap, _ := schemaService.ReloadAllSchemas(absTestDataPath)
	result, err := schemaService.Validate(string(bytes), schemaMap["urn:resource:vod:movie"].Data)
	if err != nil {
		t.Fatalf("Validation Fail - Expected success - %v", result.ValidateResult)
	} else {
		t.Log(result)
	}
}

func TestValidator_correct_movie_json_from_incurrect_content_type(t *testing.T) {
	movieSampleDataPath := filepath.Join("testdata", "samples/movie_sample_data_incorrect_content_type.json") // relative path
	bytes, err := ioutil.ReadFile(movieSampleDataPath)
	if err != nil {
		t.Fatal(err)
	}

	testDataPath := filepath.Join("testdata", "schemas") // relative path
	absTestDataPath, err := filepath.Abs(testDataPath)

	if err != nil {
		t.Fatal(err)
	}

	schemaRepo := repository.NewSchemaRepository()
	schemaService := NewSchemaService(schemaRepo)

	schemaMap, _ := schemaService.ReloadAllSchemas(absTestDataPath)
	result, err := schemaService.Validate(string(bytes), schemaMap["urn:resource:vod:movie"].Data)
	if err == nil {
		t.Fatal("Validation Fail - Expected FAIL but PASS", result)
	} else {
		t.Log(result)
	}
}

func TestValidator_correct_tvepisode_json_from_file(t *testing.T) {
	movieSampleDataPath := filepath.Join("testdata", "samples/tvepisode_sample_data.json") // relative path
	bytes, err := ioutil.ReadFile(movieSampleDataPath)
	if err != nil {
		t.Fatal(err)
	}

	testDataPath := filepath.Join("testdata", "schemas") // relative path
	absTestDataPath, err := filepath.Abs(testDataPath)

	if err != nil {
		t.Fatal(err)
	}
	schemaRepo := repository.NewSchemaRepository()
	schemaService := NewSchemaService(schemaRepo)

	schemaMap, err := schemaService.ReloadAllSchemas(absTestDataPath)
	if err != nil {
		t.Fatal("Loading Schema Fail")
		return
	}

	if schemaMap["urn:resource:catalog:tvepisode"] == nil {
		t.Fatal("urn:resource:catalog:tvepisode is not loaded")
	}
	result, err := schemaService.Validate(string(bytes), schemaMap["urn:resource:catalog:tvepisode"].Data)
	if err != nil {
		t.Fatal("Validation Fail - Expected success", result)
	} else {
		t.Log(result)
	}
}

func TestValidator_correct_season_json_from_file(t *testing.T) {
	movieSampleDataPath := filepath.Join("testdata", "samples/tvseason_sample_data.json") // relative path
	bytes, err := ioutil.ReadFile(movieSampleDataPath)
	if err != nil {
		t.Fatal(err)
	}

	testDataPath := filepath.Join("testdata", "schemas") // relative path
	absTestDataPath, err := filepath.Abs(testDataPath)

	if err != nil {
		t.Fatal(err)
	}
	schemaRepo := repository.NewSchemaRepository()
	schemaService := NewSchemaService(schemaRepo)

	schemaMap, err := schemaService.ReloadAllSchemas(absTestDataPath)
	if err != nil {
		t.Fatal("Loading Schema Fail")
		return
	}

	if schemaMap["urn:resource:catalog:tvseason"] == nil {
		t.Fatal("urn:resource:catalog:tvepisode is not loaded")
	}
	result, err := schemaService.Validate(string(bytes), schemaMap["urn:resource:catalog:tvseason"].Data)
	if err != nil {
		t.Fatal("Validation Fail - Expected success", result)
	} else {
		t.Log(result)
	}
}

func TestValidator_correct_tvseries_json_from_file(t *testing.T) {
	movieSampleDataPath := filepath.Join("testdata", "samples/tvseries_sample_data.json") // relative path
	bytes, err := ioutil.ReadFile(movieSampleDataPath)
	if err != nil {
		t.Fatal(err)
	}

	testDataPath := filepath.Join("testdata", "schemas") // relative path
	absTestDataPath, err := filepath.Abs(testDataPath)

	if err != nil {
		t.Fatal(err)
	}
	schemaRepo := repository.NewSchemaRepository()
	schemaService := NewSchemaService(schemaRepo)

	schemaMap, err := schemaService.ReloadAllSchemas(absTestDataPath)
	if err != nil {
		t.Fatal("Loading Schema Fail")
		return
	}

	if schemaMap["urn:resource:catalog:tvseries"] == nil {
		t.Fatal("urn:resource:catalog:tvepisode is not loaded")
	}
	result, err := schemaService.Validate(string(bytes), schemaMap["urn:resource:catalog:tvseries"].Data)
	if err != nil {
		t.Fatal("Validation Fail - Expected success", result)
	} else {
		t.Log(result)
	}
}
