package service

import (
	"reflect"
	"testing"

	"cicd-github.quickplay.com/platform-engineering/metadata-mgmt-services/pkg/entity"
	"cicd-github.quickplay.com/platform-engineering/metadata-mgmt-services/pkg/repository"
	"github.com/golang/mock/gomock"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestReadyZ_HealthZFailure(t *testing.T) {
	mockCtrl := gomock.NewController(t)
	defer mockCtrl.Finish()

	mockDb := repository.NewMockDbRepository(mockCtrl)
	testService := NewService(mockDb)

	var err error
	health := &entity.Health{
		Health: "dataService_service_health_value",
	}

	//Mocking
	mockDb.EXPECT().Readyz(health).Return(nil)
	mockDb.EXPECT().Healthz().Return(entity.ErrHealthzFailure)

	//Call invocation
	err = testService.Readyz()

	//Assertion
	require.Equal(t, entity.ErrHealthzFailure, err)
}

func TestHealthZ(t *testing.T) {
	mockCtrl := gomock.NewController(t)
	defer mockCtrl.Finish()

	mockDb := repository.NewMockDbRepository(mockCtrl)
	testService := NewService(mockDb)

	var err error

	//Mocking
	mockDb.EXPECT().Healthz().Return(nil)

	//Call invocation
	err = testService.Healthz()

	//Assertion
	require.Nil(t, err)
}

func TestHealthZ_HealthzError(t *testing.T) {
	mockCtrl := gomock.NewController(t)
	defer mockCtrl.Finish()

	mockDb := repository.NewMockDbRepository(mockCtrl)
	testService := NewService(mockDb)

	var err error

	//Mocking
	mockDb.EXPECT().Healthz().Return(entity.ErrHealthzFailure)

	//Call invocation
	err = testService.Healthz()

	//Assertion
	require.Equal(t, entity.ErrHealthzFailure, err)
}

func TestReadyZ(t *testing.T) {
	mockCtrl := gomock.NewController(t)
	defer mockCtrl.Finish()

	mockDb := repository.NewMockDbRepository(mockCtrl)
	testService := NewService(mockDb)

	var err error
	health := &entity.Health{
		Health: "dataService_service_health_value",
	}

	//Mocking
	mockDb.EXPECT().Readyz(health).Return(nil)
	mockDb.EXPECT().Healthz().Return(nil)

	//Call invocation
	err = testService.Readyz()

	//Assertion
	require.Nil(t, err)
}

func TestReadyZ_ReadyZFailure(t *testing.T) {
	mockCtrl := gomock.NewController(t)
	defer mockCtrl.Finish()

	mockDb := repository.NewMockDbRepository(mockCtrl)
	testService := NewService(mockDb)

	var err error
	health := &entity.Health{
		Health: "dataService_service_health_value",
	}

	//Mocking
	mockDb.EXPECT().Readyz(health).Return(entity.ErrReadyzFailure)

	//Call invocation
	err = testService.Readyz()

	//Assertion
	require.Equal(t, entity.ErrReadyzFailure, err)
}

/*
 * Auto generated by Quickstart.
 * Developer to replace the generated test cases with real ones.
 */
func TestNewService(t *testing.T) {
	type args struct {
		r repository.DbRepository
	}
	tests := []struct {
		name string
		args args
		want *Service
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := NewService(tt.args.r); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("NewService() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestCountResource_1(t *testing.T) {
	mockCtrl := gomock.NewController(t)
	defer mockCtrl.Finish()

	mockDb := repository.NewMockDbRepository(mockCtrl)
	testService := NewService(mockDb)

	sampleEntity := &entity.ResourceType{
		ContentType: "catalog",
		URN:         "movie",
	}

	//Mocking
	mockDb.EXPECT().Count("urn:resource:catalog:movie").Return(2, nil).Times(1)

	//Call invocation
	result, _ := testService.CountResource("urn:resource:" + sampleEntity.ContentType + ":" + sampleEntity.URN)

	//Assertion
	assert.Equal(t, 2, result)
}

func TestListResource_1(t *testing.T) {
	mockCtrl := gomock.NewController(t)
	defer mockCtrl.Finish()

	mockDb := repository.NewMockDbRepository(mockCtrl)
	testService := NewService(mockDb)

	listOfResource := []*entity.ResourceType{
		{
			ContentType: "catalog",
			URN:         "movie",
		},
		{
			ContentType: "catalog",
			URN:         "tvSeries",
		},
	}

	//Mocking
	mockDb.EXPECT().List().Return(listOfResource, nil).Times(1)

	//Call invocation
	listRes, _ := testService.ListResource()

	//Assertion
	assert.Equal(t, "movie", listRes[0].URN)
	assert.Equal(t, "tvSeries", listRes[1].URN)
}
