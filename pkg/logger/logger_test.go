package logger

import (
	"reflect"
	"testing"

	"github.com/sirupsen/logrus"
)

/*
 * Auto generated by Quickstart. 
 * Developer to replace the generated test cases with real ones.
 */
func Test_initBootstrapLogger(t *testing.T) {
	tests := []struct {
		name string
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			initBootstrapLogger()
		})
	}
}

/*
 * Auto generated by Quickstart. 
 * Developer to replace the generated test cases with real ones.
 */
func Test_initAccessLogger(t *testing.T) {
	tests := []struct {
		name string
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			initAccessLogger()
		})
	}
}

/*
 * Auto generated by Quickstart. 
 * Developer to replace the generated test cases with real ones.
 */
func Test_initLogger(t *testing.T) {
	tests := []struct {
		name string
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			initLogger()
		})
	}
}

/*
 * Auto generated by Quickstart. 
 * Developer to replace the generated test cases with real ones.
 */
func Test_getLogLevel(t *testing.T) {
	type args struct {
		loglevel string
	}
	tests := []struct {
		name string
		args args
		want logrus.Level
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := getLogLevel(tt.args.loglevel); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("getLogLevel() = %v, want %v", got, tt.want)
			}
		})
	}
}
